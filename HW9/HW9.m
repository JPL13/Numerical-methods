% % Script to explore least squares fitting %% Modify as needed.%% Created for UCLA Math 151B Winter 2019 %% Version 2/28/2019%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    Input parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%format longformat long e%m          = 20;           % Number of data pointsmStar      = 400;          % Number of equispaced data points to evaluate fit%polyDegree = 3;            % Maximal poly degree used for fit.                            % polyDegree must be less than 14%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    Data Creation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Target function (used to create synthetic data)F  = @(x)x.*exp(-1.5*x);  %F  = @(x)x.^(0.5);  %F  = @(x)(1.0)./(1.0 + 10.0.*x.^2);  fprintf('Test Function \n');fprintf('%s \n\n',func2str(F));xMin = 0.0;xMax = 5.0;%% Create sorted, uniformly distributed random numbers in [xMin,xMax]% to be the sample ordinates. %% Setting the seed of the random number generator so the % random numbers are the same each time the script is run%m=160  rand('seed',123456);x = sort(rand(m,1))*(xMax-xMin) + xMin;% Create data y = F(x); xStar = linspace(xMin,xMax,mStar)';                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Solution   = zeros(6,14);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    Specification of functions be used for the fit %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Create a cell array of monomials in the variable x to be used for % the fit. I'm adding parenthesis about each function so I don't have to% worry about spaces in the function specification. The "." in the % specification of the power allows these functions to be applied to % a vector of values. %monomials = { (@(x) x.^0),  (@(x) x.^1),  (@(x) x.^2), ...              (@(x) x.^3),  (@(x) x.^4),  (@(x) x.^5), ...              (@(x) x.^6),  (@(x) x.^7),  (@(x) x.^8), ...              (@(x) x.^9),  (@(x) x.^10), (@(x) x.^11), ...              (@(x) x.^12), (@(x) x.^13), (@(x) x.^14)};         % Create a list of functions, the first in the list being % monomials up to degree polyDegree    for polyDegree=1:14        p = polyDegree+1;    for i = 1:p-1      phi{i} = monomials{i};    end    % Add in extra functions by incrementing p, and then assigning    % phi{p} to the function    %    %    %p = p+1;    %phi{p} = @(x) exp(-1.0.*x);    %    %p = p+1;    phi{p} = @(x) x.*exp(-1.5.*x);       fprintf('Functions used in fit \n');    for i = 1:p      fprintf('%s \n',func2str(phi{i}));    end    % Construct over determined set of equations using this     % list of functions     A   = zeros(m,p);    c   = zeros(p,1);    for j = 1:p      A(:,j) = phi{j}(x)';    end    % Obtain the least squares solution using the \ command    %fprintf('\nCoefficients of fit \n');    %c = A\y    % Evaluate the RMS size of the residual of the least squares     % solution of the linear system of equations, and the residual of the    % fit at a uniformly spaced set of points     yStar = zeros(mStar,1);     for q=1:2       qrFlag=q-1      if(qrFlag)        [Q,R] = qr(A);        c = R\(transpose(Q)*y)        AcondNumber =  cond(A,2);        fprintf('Condition # of A  = %15.5e \n',AcondNumber);        if((c(p)-1)>1.0*10^-12)          fprintf('Fail to determine the coefficient!!!');          Solution(6, polyDegree)=c(p)-1        endif      else        c = inv(transpose(A)*A)*(transpose(A)*y)        AtAcondNumber = cond((transpose(A)*A),2);        fprintf('Condition # of AtA = %15.5e \n',AtAcondNumber);        if((c(p)-1)>1.0*10^-12)          fprintf('Fail to determine the coefficient!!!');          Solution(5, polyDegree)=c(p)-1        endif        end            for j = 1:p      yStar = yStar + c(j)*phi{j}(xStar);      end              normY         = (1/sqrt(m))*norm(y,2);      lsResidual    = (1/sqrt(m))*norm(y-A*c,2)/normY      normFstar     = (1/sqrt(mStar))*norm(F(xStar),2);      starResidual  = (1/sqrt(mStar))*norm(yStar - F(xStar),2)/normFstar            Solution((q-1)*2+1, polyDegree)=lsResidual      Solution((q-1)*2+2, polyDegree)=starResidual    end   end 