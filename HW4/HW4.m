%                        EulerSample.m%% A sample Matlab script that implements the Euler's method for % the ODE %% dy/dt = F(t,y)%% where the function F(t,y) is specified using the anonymous function % specification. Note that in this sample, F(t,y), depends upon the % parameter lambda. F will use the value of lambda that precedes the% declaration of F. If one wants to use different values of lambda % in the function F within the same program, the F must be redeclared% after lambda is specified with the different values. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    Target Function%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%F  = @(t,y)(1+t^3)*cos(0.5*t)*cos(y)%     			 %%tInitial    = 0.0;                      % Initial timetFinal      = 10.0;                      % Final timeyInitial    = 0.0;                      % Initial value of yN           = 1580;                       % Number of timesteps takenh           = (tFinal - tInitial)/N;    % Timestep determinationy           = zeros(N+1,1);             % Arrays to hold solution valuest           = zeros(N+1,1); %%////////////////////////////////////////////////////////%     Computing the solution using Runge-Kutta method    %////////////////////////////////////////////////////////%t(1)  = tInitial;y(1)  = yInitial;    for(i = 1:N)        t(i+1) = t(i) + h;        y_star=y(i)+h*F(t(i),y(i))        y(i+1) = y(i) + .5*h*F(t(i), y(i)) +.5*h*F(t(i),y_star);  %Runge-Kuttaend  sprintf(['\n N = %3d, h = %10.5f, Y(%3.1f) is  %-25.15f '],N,h,t(i+1),y(N+1))%%    Set plot limits %tPlotMin =     tInitial;tPlotMax =     tFinal;yPlotMin =     -5.0;yPlotMax =     5.0;% plot, then scale by calling axis command plot(t,y);axis([tPlotMin,tPlotMax,yPlotMin,yPlotMax]);title('Approximate solution to dy/dt obtained with Runge-Kutta method ')xlabel('t') ylabel('y(t)')