%                        EulerSample.m%% A sample Matlab script that implements the Euler's method for % the ODE %% dy/dt = F(t,y)%% where the function F(t,y) is specified using the anonymous function % specification. Note that in this sample, F(t,y), depends upon the % parameter lambda. F will use the value of lambda that precedes the% declaration of F. If one wants to use different values of lambda % in the function F within the same program, the F must be redeclared% after lambda is specified with the different values. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    Target Function%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%F1  = @(y1)4*y1*(1-y1)     %EulerMethodF2  = @(y2)4*y2*(1-y2)         %Runge-Kutta%     			 %%tInitial    = 0.0;                      % Initial timetFinal      = 1.0;                      % Final timeyInitial    = 0.1;                      % Initial value of yarray       = [10, 20, 40, 80, 160, 320];                       % Number of timesteps takenA           = zeros(size(array))B           = zeros(size(array))%%////////////////////////////////////////////////////////%     Computing the solution using both methods   %////////////////////////////////////////////////////////%   for idx = 1:numel(array)  N =array(idx)  h = (tFinal - tInitial)/N;    % Timestep determination  y1 = zeros(N+1,1);             % Arrays to hold solution values  y2 = zeros(N+1,1);             % Arrays to hold solution values  t = zeros(N+1,1);   t(1)  = tInitial;  y1(1)  = yInitial;    y2(1)  = yInitial;    for(i = 1:N)        t(i+1) = t(i) + h;        y2(i+1) = y2(i) + .5*h*F2(y2(i))+.5*h*F2(y2(i)+h*F2(y2(i)));  %Runge-Kutta        y1(i+1) = y1(i) + h*F1(y1(i));   %EulerMethod  end    format long  A(idx)=y1(N+1)   B(idx)=y2(N+1)     end  C=zeros(1,4)  %store accuracy of Euler MethodD=zeros(1,4)  %store accuracy of RungeKutta Methodfor(i = 1:4)    C(i)=log((A(i)-A(i+1))/(A(i+1)-A(i+2)))/log(2)    D(i)=log((B(i)-B(i+1))/(B(i+1)-B(i+2)))/log(2)end  %%////////////////////////////////////////////////////////%     Computing the exact solution %////////////////////////////////////////////////////////%  N = 10*2^9  h = (tFinal - tInitial)/N;    % Timestep determination  y2 = zeros(N+1,1);             % Arrays to hold solution values  t = zeros(N+1,1);   t(1)  = tInitial;  y2(1)  = yInitial;    for(i = 1:N)        t(i+1) = t(i) + h;        y2(i+1) = y2(i) + .5*h*F2(y2(i))+.5*h*F2(y2(i)+h*F2(y2(i)));  %Runge-Kutta  end    format long  y2(N+1)  %%////////////////////////////////////////////////////////%     Computing significant digits%////////////////////////////////////////////////////////%   abs(A-8.584864284474619e-01)/ 8.584864284474619e-01 abs(B-8.584864284474619e-01)/ 8.584864284474619e-01  %%    Set plot limits %tPlotMin =     tInitial;tPlotMax =     tFinal;yPlotMin =     0.0;yPlotMax =     2.0;% plot, then scale by calling axis command plot(t,y2);axis([tPlotMin,tPlotMax,yPlotMin,yPlotMax]);title('Approximate solution to dy/dt = -y obtained with Euler''s method ')xlabel('t') ylabel('y(t)')